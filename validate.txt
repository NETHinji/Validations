 private static bool ValidateCustomer(Customer customer)
        {
            StringBuilder exceptionMessage = new StringBuilder();
            
            string x = customer.CustomerID.Substring(1, 4);
            bool returnVal = true;
            if (customer.CustomerID.IndexOf('C')!=0 || !x.All(char.IsDigit))
            {
                returnVal = false;
                exceptionMessage.Append(Environment.NewLine + "Invalid CustomerID");
            }
            if (customer.Contact > 9999999999 || customer.Contact < 8000000000)
            {
                returnVal = false;
                exceptionMessage.Append(Environment.NewLine + "Invalid Contact");
            }
            if (!IsValidEmail(customer.Email))
            {
                returnVal = false;
                exceptionMessage.Append(Environment.NewLine + "Invalid Email ID");
            }
            if (!cityList.Contains(customer.City))
            {
                returnVal = false;
                exceptionMessage.Append(Environment.NewLine + "Invalid City");
            }
            if (!returnVal)
                throw new CustomerException(exceptionMessage.ToString());
            return returnVal;
        }

        private static bool IsValidEmail(string strIn)
        {
            invalid = false;
            if (String.IsNullOrEmpty(strIn))
                return false;

            // Use IdnMapping class to convert Unicode domain names.
            try
            {
                strIn = Regex.Replace(strIn, @"(@)(.+)$", DomainMapper,
                                      RegexOptions.None, TimeSpan.FromMilliseconds(200));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }

            if (invalid)
                return false;

            // Return true if strIn is in valid email format.
            try
            {
                return Regex.IsMatch(strIn,
                      @"^(?("")("".+?(?<!\\)""@)|(([0-9a-z]((\.(?!\.))|[-!#\$%&'\*\+/=\?\^`\{\}\|~\w])*)(?<=[0-9a-z])@))" +
                      @"(?(\[)(\[(\d{1,3}\.){3}\d{1,3}\])|(([0-9a-z][-0-9a-z]*[0-9a-z]*\.)+[a-z0-9][\-a-z0-9]{0,22}[a-z0-9]))$",
                      RegexOptions.IgnoreCase, TimeSpan.FromMilliseconds(250));
            }
            catch (RegexMatchTimeoutException)
            {
                return false;
            }
        }

        private static string DomainMapper(Match match)
        {
            IdnMapping idn = new IdnMapping();

            string domainName = match.Groups[2].Value;
            try
            {
                domainName = idn.GetAscii(domainName);
            }
            catch (ArgumentException)
            {
                invalid = true;
            }
            return match.Groups[1].Value + domainName;
        }